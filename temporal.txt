-- Step 1: Create a new database (optional)
CREATE DATABASE IF NOT EXISTS temporal_demo;
USE temporal_demo;

-- Step 2: Create a table for storing events
CREATE TABLE events (
    id INT AUTO_INCREMENT PRIMARY KEY,
    event_name VARCHAR(100) NOT NULL,
    event_time DATETIME NOT NULL
);

-- Step 3: Insert sample data into events table
INSERT INTO events (event_name, event_time) VALUES 
('Project Kickoff', '2025-04-20 10:00:00'),
('Client Meeting', '2025-04-21 14:30:00'),
('Code Review', '2025-04-22 09:15:00');

-- Step 4: Create a logs table to demonstrate automatic time tracking
CREATE TABLE logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    action VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Step 5: Insert sample log actions
INSERT INTO logs (action) VALUES 
('User Login'),
('File Uploaded'),
('Profile Updated');

-- Step 6: Retrieve all events
SELECT * FROM events;

-- Step 7: Retrieve events after a specific date
SELECT * FROM events
WHERE event_time > '2025-04-20 12:00:00';

-- Step 8: Retrieve logs with automatic timestamps
SELECT * FROM logs;

-- Step 9: Simulate an update to check updated_at
UPDATE logs
SET action = 'User Logout'
WHERE id = 1;

-- Check the updated row
SELECT * FROM logs WHERE id = 1;
